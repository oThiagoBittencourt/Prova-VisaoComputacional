# -*- coding: utf-8 -*-
"""TreinamentoCNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZSA4OOmnCzm1aSd4dkiSlirTrIeMGu0E

# Treinamento de CNN

Imports:
"""

import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

"""Treinamento:"""

# Carrega e normaliza o dataset CIFAR-10
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()
x_train, x_test = x_train.astype('float32') / 255.0, x_test.astype('float32') / 255.0
y_train, y_test = y_train.flatten(), y_test.flatten()  # Para facilitar o uso no sklearn

# Nomes das classes
class_names = [
    "avião", "automóvel", "pássaro", "gato", "cervo",
    "cachorro", "sapo", "cavalo", "navio", "caminhão"
]

# Aumentação de dados: gera imagens ligeiramente diferentes a partir das originais
data_augmentation = ImageDataGenerator(
    rotation_range=15,
    width_shift_range=0.1,
    height_shift_range=0.1,
    horizontal_flip=True
)

# Define a arquitetura da CNN
def create_model():
    model = models.Sequential([
        layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
        layers.MaxPooling2D((2, 2)),
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.Flatten(),
        layers.Dense(64, activation='relu'),
        layers.Dense(10, activation='softmax')
    ])
    return model

# Criação e compilação do modelo
model = create_model()
model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])

# Treinamento com data augmentation
history = model.fit(
    data_augmentation.flow(x_train, y_train, batch_size=64),
    epochs=10,
    validation_data=(x_test, y_test)
)

"""Avaliação:"""

# Avaliação
test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print(f"Acurácia no conjunto de teste: {test_acc * 100:.2f}%")

"""Gráficos:"""

# Gráfico de desempenho
plt.figure(figsize=(8, 5))
plt.plot(history.history['accuracy'], label='Treinamento')
plt.plot(history.history['val_accuracy'], label='Validação')
plt.xlabel('Épocas')
plt.ylabel('Acurácia')
plt.title("Desempenho da CNN com Data Augmentation")
plt.legend()
plt.grid(True)
plt.show()

"""Matriz de Confusão:"""

# Matriz de confusão
y_pred = model.predict(x_test)
y_pred_classes = np.argmax(y_pred, axis=1)

cm = confusion_matrix(y_test, y_pred_classes)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=class_names)
disp.plot(cmap=plt.cm.Blues, xticks_rotation=45)
plt.title("Matriz de Confusão")
plt.tight_layout()
plt.show()